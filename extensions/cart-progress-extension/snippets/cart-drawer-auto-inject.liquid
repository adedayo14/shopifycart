{% comment %}
  Unified Auto-Inject for Cart Drawers
  Handles both progress bars and recommendations injection into cart drawers
{% endcomment %}

<script>
(function() {
  'use strict';
  
  // Only run if not already loaded
  if (window.CartDrawerAutoInject) return;
  
  console.log('[AutoInject] Unified cart drawer auto-inject loaded');
  
  window.CartDrawerAutoInject = {
    initialized: false,
    
    init() {
      if (this.initialized) return;
      this.initialized = true;
      
      console.log('[AutoInject] Initializing unified auto-inject...');
      this.injectIntoExistingDrawers();
      this.watchForDrawerEvents();
    },
    
    injectIntoExistingDrawers() {
      const drawers = this.findCartDrawers();
      console.log(`[AutoInject] Found ${drawers.length} cart drawers`);
      
      drawers.forEach(drawer => {
        this.injectProgressBar(drawer);
        this.injectRecommendations(drawer);
      });
    },
    
    findCartDrawers() {
      const selectors = [
        '[data-cart-drawer]', '.cart-drawer', '#CartDrawer', '.drawer',
        '.cart-drawer-content', '.cart-notification', '.cart-drawer__content',
        '.cart__drawer', '[id*="cart-drawer"]', '[class*="cart-drawer"]',
        '.mini-cart', '.cart-popup', '.cart-flyout', '.cart-sidebar'
      ];
      
      const drawers = [];
      selectors.forEach(selector => {
        document.querySelectorAll(selector).forEach(el => {
          if (!drawers.includes(el)) drawers.push(el);
        });
      });
      
      return drawers;
    },
    
    injectProgressBar(drawer) {
      if (drawer.querySelector('.cart-progress-auto-injected')) return;
      
      // Try to clone existing progress bar first
      const original = document.querySelector('[data-cart-progress]:not(.cart-progress-auto-injected)');
      
      let progressBarElement;
      if (original) {
        console.log('[AutoInject] Cloning existing progress bar');
        progressBarElement = original.cloneNode(true);
        progressBarElement.classList.add('cart-progress-auto-injected');
      } else {
        console.log('[AutoInject] Creating default progress bar');
        progressBarElement = this.createDefaultProgressBar();
      }
      
      this.insertIntoDrawer(drawer, progressBarElement, 'progress');
    },
    
    injectRecommendations(drawer) {
      if (drawer.querySelector('.cart-recommendations-auto-injected')) return;
      
      // Only inject if original recommendations exist on page
      const original = document.querySelector('[data-cart-recommendations]:not(.cart-recommendations-auto-injected)');
      if (!original) return;
      
      console.log('[AutoInject] Cloning recommendations block');
      const recommendationsElement = original.cloneNode(true);
      recommendationsElement.classList.add('cart-recommendations-auto-injected');
      
      this.insertIntoDrawer(drawer, recommendationsElement, 'recommendations');
    },
    
    createDefaultProgressBar() {
      const element = document.createElement('div');
      element.innerHTML = \`
        <div class="cart-progress-container cart-progress-visible cart-progress-auto-injected" 
             data-cart-progress
             data-block-id="auto-inject-default"
             data-progress-mode="continuous"
             data-free-threshold="75"
             data-gift-threshold="150"
             data-currency-symbol="{{ cart.currency.symbol | default: '$' }}"
             data-progress-color="#000000"
             data-track-color="#e5e5e5"
             data-message-color="#121212"
             data-header-display="cart_and_percentage"
             data-milestone-color="#666666"
             data-milestone-achieved-color="#22c55e"
             data-achievement-symbol="checkmark"
             data-show-symbol-circle="true"
             data-message-free-shipping="Add [AMOUNT] more for FREE shipping!"
             data-message-free-achieved="✅ FREE shipping unlocked!"
             data-message-gift="Add [AMOUNT] more for your FREE gift!"
             data-message-gift-achieved="🎁 Free gift added!"
             data-message-initial="Add items to unlock rewards"
             data-message-complete="🎉 All rewards unlocked!"
             style="margin: 15px 0; padding: 0 15px;">

          <div class="cart-progress-header">
            <span class="cart-progress-title">CART (<span data-cart-count>{{ cart.item_count | default: 0 }}</span>)</span>
            <span class="cart-progress-message" role="status" aria-live="polite" style="color: #121212;">Add items to unlock rewards</span>
            <span class="cart-progress-percentage" data-progress-percentage>0%</span>
          </div>

          <div class="cart-progress-bar-wrapper">
            <div class="cart-progress-track" style="--track-color: #e5e5e5;">
              <div class="cart-progress-fill" style="width: 0%; --progress-color: #000000;" aria-valuenow="0" aria-valuemin="0" aria-valuemax="100"></div>
              <div class="cart-progress-milestones"></div>
            </div>
          </div>
        </div>
      \`;
      return element.firstElementChild;
    },
    
    insertIntoDrawer(drawer, element, type) {
      const injectionPoints = [
        drawer.querySelector('.cart-header'),
        drawer.querySelector('.cart-drawer-header'),
        drawer.querySelector('.drawer-header'),
        drawer.querySelector('.cart-title')
      ];
      
      // For recommendations, prefer bottom injection points
      if (type === 'recommendations') {
        injectionPoints.unshift(
          drawer.querySelector('.cart-footer'),
          drawer.querySelector('.cart-drawer-footer'),
          drawer.querySelector('.drawer-footer')
        );
      }
      
      // Add fallback injection points
      injectionPoints.push(
        drawer.querySelector('.cart-items-wrapper'),
        drawer.querySelector('.cart-items'),
        drawer.querySelector('.drawer-content'),
        drawer.querySelector('.cart-content'),
        drawer.firstElementChild
      );
      
      const injectionPoint = injectionPoints.find(point => point !== null);
      
      if (injectionPoint) {
        if (type === 'recommendations') {
          // Insert recommendations at bottom
          element.style.marginTop = '20px';
          element.style.borderTop = '1px solid #e5e5e5';
          element.style.paddingTop = '20px';
          injectionPoint.parentNode.appendChild(element);
        } else {
          // Insert progress bar at top
          element.style.margin = '15px 0';
          element.style.padding = '0 15px';
          
          if (injectionPoint.matches('.cart-header, .cart-drawer-header, .drawer-header, .cart-title')) {
            injectionPoint.parentNode.insertBefore(element, injectionPoint.nextSibling);
          } else {
            injectionPoint.parentNode.insertBefore(element, injectionPoint);
          }
        }
        
        console.log(\`[AutoInject] Injected \${type} into drawer\`);
        
        // Initialize components
        setTimeout(() => this.initializeComponents(), 100);
      }
    },
    
    initializeComponents() {
      if (window.ProgressBarManager) {
        window.ProgressBarManager.cacheElements();
        window.ProgressBarManager.refresh();
      }
    },
    
    watchForDrawerEvents() {
      // Cart drawer opening events
      const events = [
        'cart:open', 'drawer:open', 'cart:show', 'drawer:show',
        'cart-drawer:open', 'cartDrawer:open', 'miniCart:open'
      ];
      
      events.forEach(eventName => {
        document.addEventListener(eventName, () => {
          console.log(\`[AutoInject] Drawer opened (\${eventName})\`);
          setTimeout(() => this.injectIntoExistingDrawers(), 100);
        });
      });
      
      // Cart button clicks
      document.addEventListener('click', (e) => {
        const cartTriggers = [
          '[data-cart-drawer-toggle]', '.cart-drawer-toggle', '.cart-icon',
          '.cart-link', '[href="/cart"]', '.header__icon--cart', '.cart-count-bubble'
        ];
        
        if (cartTriggers.some(sel => e.target.matches(sel) || e.target.closest(sel))) {
          setTimeout(() => this.injectIntoExistingDrawers(), 200);
        }
      });
      
      // DOM mutations for dynamic drawers
      const observer = new MutationObserver((mutations) => {
        mutations.forEach((mutation) => {
          mutation.addedNodes.forEach((node) => {
            if (node.nodeType === 1 && this.isCartDrawer(node)) {
              setTimeout(() => {
                this.injectProgressBar(node);
                this.injectRecommendations(node);
              }, 50);
            }
          });
        });
      });
      
      observer.observe(document.body, { childList: true, subtree: true });
    },
    
    isCartDrawer(element) {
      const indicators = ['cart-drawer', 'drawer', 'cart-notification', 'mini-cart'];
      return indicators.some(indicator => 
        element.classList.contains(indicator) ||
        element.id.includes(indicator) ||
        element.hasAttribute('data-cart-drawer')
      );
    }
  };
  
  // Initialize
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', () => window.CartDrawerAutoInject.init());
  } else {
    window.CartDrawerAutoInject.init();
  }
  
  // Delayed initialization for async drawers
  setTimeout(() => window.CartDrawerAutoInject.init(), 1000);
  
})();
</script>
