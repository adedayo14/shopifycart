{% comment %}
  Global Cart Progress Bar Auto-Inject
  This is included on every page to ensure progress bars work in cart drawers
{% endcomment %}

<script>
(function() {
  'use strict';
  
  // Only run if not already loaded
  if (window.CartProgressGlobalAutoInject) return;
  
  console.log('[ProgressBar] Global auto-inject script loaded');
  
  window.CartProgressGlobalAutoInject = {
    injected: false,
    
    init() {
      console.log('[ProgressBar] Global auto-inject initializing...');
      this.watchForDrawerOpening();
      this.injectIntoExistingDrawers();
    },
    
    injectIntoExistingDrawers() {
      const drawers = this.findCartDrawers();
      console.log('[ProgressBar] Found existing drawers for global inject:', drawers.length);
      
      drawers.forEach(drawer => {
        this.injectIntoDrawer(drawer);
      });
    },
    
    findCartDrawers() {
      const selectors = [
        '[data-cart-drawer]',
        '.cart-drawer',
        '#CartDrawer',
        '.drawer',
        '.cart-drawer-content',
        '.cart-notification',
        '.cart-drawer__content',
        '.cart__drawer',
        '[id*="cart-drawer"]',
        '[class*="cart-drawer"]',
        '.mini-cart',
        '.cart-popup',
        '.cart-flyout',
        '.cart-sidebar'
      ];
      
      const drawers = [];
      selectors.forEach(selector => {
        document.querySelectorAll(selector).forEach(el => {
          if (!drawers.includes(el)) {
            drawers.push(el);
          }
        });
      });
      
      return drawers;
    },
    
    injectIntoDrawer(drawer) {
      if (drawer.querySelector('.cart-progress-auto-injected, .cart-progress-global-injected')) {
        console.log('[ProgressBar] Progress bar already exists in drawer');
        return;
      }
      
      console.log('[ProgressBar] Creating global progress bar in drawer:', drawer);
      
      // Create a default progress bar that works everywhere
      this.createProgressBar(drawer);
    },
    
    createProgressBar(drawer) {
      const progressBarHTML = \`
        <div class="cart-progress-container cart-progress-visible cart-progress-global-injected" 
             data-cart-progress
             data-block-id="global-inject"
             data-progress-mode="continuous"
             data-free-threshold="75"
             data-gift-threshold="150"
             data-gift-variant-id=""
             data-gift-quantity="1"
             data-gaming-protection="remove"
             data-currency-symbol="$"
             data-progress-color="#000000"
             data-track-color="#e5e5e5"
             data-message-color="#121212"
             data-header-display="cart_and_percentage"
             data-milestone-color="#666666"
             data-milestone-achieved-color="#22c55e"
             data-achievement-symbol="checkmark"
             data-show-symbol-circle="true"
             data-message-free-shipping="Add [AMOUNT] more for FREE shipping!"
             data-message-free-achieved="✅ FREE shipping unlocked!"
             data-message-gift="Add [AMOUNT] more for your FREE gift!"
             data-message-gift-achieved="🎁 Free gift added!"
             data-message-initial="Add items to unlock rewards"
             data-message-complete="🎉 All rewards unlocked!"
             style="margin: 15px 0; padding: 0 15px;">

          <div class="cart-progress-header">
            <span class="cart-progress-title">
              CART (<span data-cart-count>0</span>)
            </span>
            <span class="cart-progress-message" role="status" aria-live="polite" style="color: #121212;">
              Add items to unlock rewards
            </span>
            <span class="cart-progress-percentage" data-progress-percentage>
              0%
            </span>
          </div>

          <div class="cart-progress-bar-wrapper">
            <div class="cart-progress-track" style="--track-color: #e5e5e5;">
              <div class="cart-progress-fill" style="width: 0%; --progress-color: #000000;" aria-valuenow="0" aria-valuemin="0" aria-valuemax="100"></div>
              <div class="cart-progress-milestones"></div>
            </div>
          </div>
        </div>
      \`;
      
      const injectionPoints = [
        drawer.querySelector('.cart-header'),
        drawer.querySelector('.cart-drawer-header'),
        drawer.querySelector('.drawer-header'),
        drawer.querySelector('.cart-title'),
        drawer.querySelector('.cart-items-wrapper'),
        drawer.querySelector('.cart-items'),
        drawer.querySelector('.drawer-content'),
        drawer.querySelector('.cart-content'),
        drawer.firstElementChild
      ];
      
      const injectionPoint = injectionPoints.find(point => point !== null);
      
      if (injectionPoint) {
        const progressBarContainer = document.createElement('div');
        progressBarContainer.innerHTML = progressBarHTML;
        
        if (injectionPoint.matches('.cart-header, .cart-drawer-header, .drawer-header, .cart-title')) {
          injectionPoint.parentNode.insertBefore(progressBarContainer.firstElementChild, injectionPoint.nextSibling);
        } else {
          injectionPoint.parentNode.insertBefore(progressBarContainer.firstElementChild, injectionPoint);
        }
        
        console.log('[ProgressBar] Global progress bar created in drawer');
        
        // Initialize the progress bar if manager is available
        setTimeout(() => {
          this.initializeProgressBar();
        }, 100);
      }
    },
    
    initializeProgressBar() {
      // Load CSS if not already loaded
      if (!document.querySelector('link[href*="cart-progress.css"]')) {
        const link = document.createElement('link');
        link.rel = 'stylesheet';
        link.href = '{{ "cart-progress.css" | asset_url }}';
        document.head.appendChild(link);
      }
      
      // Load JS if not already loaded and initialize
      if (!window.ProgressBarManager) {
        const script = document.createElement('script');
        script.src = '{{ "cart-progress.js" | asset_url }}';
        script.onload = () => {
          if (window.ProgressBarManager) {
            window.ProgressBarManager.cacheElements();
            window.ProgressBarManager.refresh();
          }
        };
        document.head.appendChild(script);
      } else {
        window.ProgressBarManager.cacheElements();
        window.ProgressBarManager.refresh();
      }
    },
    
    watchForDrawerOpening() {
      // Common cart drawer opening events
      const events = [
        'cart:open', 'drawer:open', 'cart:show', 'drawer:show',
        'cart-drawer:open', 'cartDrawer:open', 'miniCart:open'
      ];
      
      events.forEach(eventName => {
        document.addEventListener(eventName, () => {
          console.log(\`[ProgressBar] Global: Cart drawer opened (\${eventName})\`);
          setTimeout(() => {
            this.injectIntoExistingDrawers();
          }, 100);
        });
      });
      
      // Watch for cart button clicks
      document.addEventListener('click', (e) => {
        const cartTriggers = [
          '[data-cart-drawer-toggle]',
          '.cart-drawer-toggle',
          '.cart-icon',
          '.cart-link',
          '[href="/cart"]',
          '.header__icon--cart',
          '.cart-count-bubble'
        ];
        
        if (cartTriggers.some(selector => e.target.matches(selector) || e.target.closest(selector))) {
          console.log('[ProgressBar] Global: Cart trigger clicked');
          setTimeout(() => {
            this.injectIntoExistingDrawers();
          }, 200);
        }
      });
      
      // Watch for new cart drawers being added to DOM
      const observer = new MutationObserver((mutations) => {
        mutations.forEach((mutation) => {
          mutation.addedNodes.forEach((node) => {
            if (node.nodeType === 1) {
              if (this.isCartDrawer(node)) {
                console.log('[ProgressBar] Global: New cart drawer detected:', node);
                setTimeout(() => this.injectIntoDrawer(node), 50);
              }
              
              const innerDrawers = this.findCartDrawersInNode(node);
              innerDrawers.forEach(drawer => {
                setTimeout(() => this.injectIntoDrawer(drawer), 50);
              });
            }
          });
        });
      });
      
      observer.observe(document.body, {
        childList: true,
        subtree: true
      });
    },
    
    isCartDrawer(element) {
      const cartDrawerIndicators = [
        'cart-drawer', 'drawer', 'cart-notification', 'mini-cart', 
        'cart-popup', 'cart-flyout', 'cart-sidebar'
      ];
      
      return cartDrawerIndicators.some(indicator => 
        element.classList.contains(indicator) ||
        element.id.includes(indicator) ||
        element.hasAttribute('data-cart-drawer')
      );
    },
    
    findCartDrawersInNode(node) {
      if (node.querySelector) {
        return this.findCartDrawers().filter(drawer => node.contains(drawer));
      }
      return [];
    }
  };
  
  // Initialize immediately
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', () => window.CartProgressGlobalAutoInject.init());
  } else {
    window.CartProgressGlobalAutoInject.init();
  }
  
  // Also try after delays for async-loaded drawers
  setTimeout(() => window.CartProgressGlobalAutoInject.init(), 1000);
  setTimeout(() => window.CartProgressGlobalAutoInject.init(), 3000);
  
})();
</script>
